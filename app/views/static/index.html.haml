#the-carousel.carousel.slide
  .carousel-inner
  
    .item.active
      = image_tag "slide-01.jpg", :alt => "slide 1"
      .container
        .carousel-caption
          %h1 Efficient.
          %p.lead 
            Ruby's CSV class, redis, and delayed-job are used to provide extremely fast and efficient bulk imports. Currently with one worker, it can process ~ 50k rows.

    .item
      = image_tag "slide-02.jpg", :alt => "slide 2"
      .container
        .carousel-caption
          %h1 Authentication.
          %p.lead Devise was used for a local authentication strategy. Users are required to sign up and log in before uploading any reports. Once registered, you can track, view, and organize all of your .tab reports in one place.

    .item
      = image_tag "slide-03.jpg", :alt => "slide 3"
      .container
        .carousel-caption
          %h1 Tested.
          %p.lead 
            I wrote unit tests for the models to demonstrate my familiarity with TDD. In a real-world application,
            the testing suite would include different forms of coverage as well (e.g. integration and controller tests), well organized mock-data, and javascript tests if a javascript MVC was used. 

          
  %a.left.carousel-control{"data-slide" => "prev", :href => "#the-carousel"} ‹
  %a.right.carousel-control{"data-slide" => "next", :href => "#the-carousel"} ›


.container.marketing

  .row
    .span4
      %h2 Efficient
      %p  
        Ruby's CSV class, redis, and delayed-job are used to provide extremely fast and efficient bulk imports. Currently with one worker, it can process ~ 50k rows.

    .span4
      %h2 Authentication
      %p Devise was used for a local authentication strategy. Users are required to sign up and log in before uploading any reports. Once registered, you can track, view, and organize all of your .tab reports in one place.

    .span4
      %h2 Tested
      %p 
        I wrote unit tests for the models to demonstrate my familiarity with TDD. In a real-world application,
        the testing suite would include different forms of coverage as well (e.g. integration and controller tests), well organized mock-data, and javascript tests if a javascript MVC was used. 




  %footer
    %p.pull-right
      %a{:href => "#"} Back to top
    %p
      \© 2013 Phillip Robertson. ·
